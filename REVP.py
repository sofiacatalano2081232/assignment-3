def reverse_complement(dna):
    complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
    return ''.join(complement[base] for base in reversed(dna))

def find_reverse_palindromes(dna_string):
    results = []
    for i in range(len(dna_string)):
        for j in range(4, 12):  # Length between 4 and 12
            if i + j <= len(dna_string):
                substr = dna_string[i:i + j]
                rev_substr = reverse_complement(substr)
                if substr == rev_substr:
                    results.append((i + 1, j))  # Add position and length
    return results

dna_sequence = "GCGCTCGCGGCTACGCATCCCTGGTCCAATGGGCTCTGCCACAGAACTCACTACTCACCTATCCCGAGCGGGACAATCGCGTAGCGGAAATATGGCAGACTTAGCAGAACTGACTCTTTCGCACACCCTTTGTCTGAGTGTCTTGTGCGCATGATTGCTTCGAACCACTGTGTGGGCCGAGAACATGTCCCGTAAATTAGGTTCTGTAGGTGCTTCCGGGGGATTGACGTGATTCGCACAAAAGGTATTCTTCGGGCGTTGTTGATCCCGAAAGCACAGTTATTCCTTCGGATGATAGACGGGCATTTAGTGTACACAGCCCTAAGAGCCAGCACGGGCGAAATTTGTTAATGTTTCAGGACCGCCCCACAGTTGTGGGGACACAGGCCACAAACCTTTAAGGGAGGGCCGACTTCGGTTCATGTTGGGCATTAGCTCGCGAGTAGCGCACCGGCTCGTCCTTCTAGATTGGCACTCTCGTCTCGGCGTGCACGCCGGGTACGCCGCGTCCCTCTGAGTGACGGCGGCGGTGTCCGACTGTGTATTCGACTAACACAACCAGAGTCTCACGTATTGGTGATCTGCGCATTAGATCGCCTAGGATCGTCAGGTGAGATAGGCTTGTAACCGGGTGTAAGAGAGCTGGTTCATCTATGGTCCTAATCCTTTCTCAGCGGCGCGTTGCCTGGGAACTGACAATGACCGAATATTTAGACGTGGTGACCGTAGTTCTTTTTGCAGGGTACCGCATTGGATACTAGTGAGAATGCGCTGCCCATCATGAATGTCCTCACGACGTGGGTGTTACGCATGTGTGAATTATAGTCCCCCAGGCAGTATTTTACGGCCGAGTCTCGGCAAGACCTGCGCCTGTGAATTTTCTATCCCCTGCATCGTCCCATTTATATGAAGCGCAGCTCGGCACGGGCCTTTAATCCATCATCCGGTATGCAGTAACCTGATACTTTAGCGAGCGATAT"
reverse_palindromes = find_reverse_palindromes(dna_sequence)

for pos, length in reverse_palindromes:
    print(f" {pos} {length}")
